<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><title>Prof. Frank Dehne</title>

  

  
  
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></head><body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);" alink="#000000" link="#000000" vlink="#000000">
<table border="0" width="100%">

  <tbody>
    <tr>
      <td height="27" width="45%">
      <h2>COMP 5704: Parallel Algorithms and Applications in Data Science<br>
</h2>
      </td>
      <td height="27" width="10%">
      <p><br>
      </p>
      </td>
      <td height="27" width="45%">
      <p><b>School of Computer Science</b><br>
      <b>Carleton University, Ottawa, Canada</b></p>
      </td>
    </tr>
  </tbody>
</table>

<hr noshade="noshade">
<h2><font color="#005128">Project Title: </font><font><font color="#005128">GPU-powered outlier detection on stream data</font></font></h2>

<h2><font color="#005128">Name: Kangqing Yu<br>
</font></h2>

<hr noshade="noshade">
<b><font color="#005128">Project Outline:</font></b>Outlier detection or sometimes refered as anomaly detection is a topic in data mining and maching learning that involves a process of identification of items which largely differ from the rest of the group. When the data come in form of stream, this task becomes very challengeing because stream data, by it nature, is large, continous and change over time. In addition, questions exists on how we can achieve better result based on the historical data we have already seen and the newly arrived data from stream without storing the entire dataset. One technique which we have been widely used to solve this problem is distance-based(KNN) and density-based(LOF algorithm) that has been modified to work in streaming context using sliding window. However, this these approaches will only consider the active objects in current window and the impact of obsolute data is basically ignored. In addition, both distance-based and density-based apporach are well-known for being computational expensive. Therefore, it is interesting to know whether these methods are parallelizable to achieve better performance in streaming environment. In this project, I will investigate into how GPU programming, CUDA specificaly could facilitate this task.
<p><b><font color="#005128">Startup Paper(s):</font></b> <a href="PDF_files_of_relevant_papers/07516110.pdf">GPU-Accelerated Outlier Detection for Continuous Data Streams
</a></p>

<p><b><font color="#005128">Deliverables:</font></b></p>

<ul>

  <li>
    <div align="left"><a href="Literature_Review.pdf"><font color="#000000">Literature Review</font></a> (PDF file created from
LATEX template)</div>
  </li>
  <li>
    <div align="left"><a href="Presentation_Outline.pdf"><font color="#000000">Presentation Outline</font></a> (PDF file created from
LATEX template)</div>
  </li>
  <li>
    <div align="left"> <a href="Slide_Presentation.ppt"><font color="#000000">Slide Presentation</font></a> (PowerPoint File) incl.
Question Sheet </div>
  </li>
  <li>
    <div align="left"><a href="Final_Paper.pdf"><font color="#000000">Final
Paper</font></a> (PDF file created from LATEX template)</div>
  </li>
  <li><a href="Code_and_Data"><font color="#000000">Code and Data</font></a>
(put all code, data, etc. into this directory)</li>
</ul>

<p><b><font color="#005128">Relevant References:</font></b></p>

<ul>

  <li>list all relevant papers and include links to their PDF files</li>
</ul>

</body></html>